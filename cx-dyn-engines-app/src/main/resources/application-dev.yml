# only needed if using groovy scripting, to avoid Spring template warning
spring:
  groovy:
    template:
      check-template-location: false

management:
  endpoint:    shutdown:      enabled: true    beans:      enabled: true    env:      enabled: true
  endpoints:    web:      exposure:        include: "shutdown,beans,env,info,health,loggers"

logging:
  file: cx-engines.log
  level:
    com:
      checkmarx:
        engine: DEBUG
    org:
      apache:
        http: INFO
      springframework: INFO

cx:
  cxEngineUseSSL: false           #Use http/https to monitor and register Engines with
  concurrentScanLimit: 3          #Max number of concurrent scans (Engines) that DE will manage
  cxEnginePrefix: '**'            #Prefix used within Registering engine in CX UI
  expireEngineBufferMins: 1       #Grace period before expiring and engine
  idleMonitorSecs: 30             #How often to check idle engines to determine if expired (ready for termination)
  queueCapacity: 100
  queueIntervalSecs: 15
  queueingEngineName: Localhost   #Name given to the Blocked Engine in Cx UI
  restUrl: http://54.90.238.36
  timeoutSecs: 120                #HTTP client request timeout (connection and read)
  terminateOnStop: false
  userName: xxx                   #Checkmarx user (must have access to register engines)
  password: xxx                   #Checkmarx password

cx-aws-engine:
  assignPublicIP: true
  cxEngineTimeoutSec: 600         #how many seconds to wait for instance to launch before considered a failure
  cxVersion: 8.8.0-HF1
  engineSizeMap:
    S: t3.medium
    M: t3.large
    L: t3.xlarge
  iamProfile: allow-ssm
  imageId: ami-05245c65f7b0c5885  #AMI ID of the Engine Server
  keyName: cx-servers             #AWS Key name for support purposes
  launchTimeoutSec: 60            #Amount of time to wait for an instance to move out of PENDING state in AWS
  monitorPollingIntervalSecs: 10  #Number of seconds before checking both Instance state and checking if the the HTTP endpoint is available on the Engine
  scriptOnLaunch: scripts/launch.groovy
  scriptOnStop: scripts/stop.groovy
  scriptOnTerminate: scripts/terminate.groovy
  stopWaitTimeSecs: 30
  securityGroup: sg-a0e70bdc      #AWS Security Group to apply to launched Engines
  subnetId: subnet-cdc39b84       #AWS Subnet ID to launch Engines into
  tagMap:
#    client: abc
#    component: cx-de
    owner: Randy
  usePublicUrlForCx: false        #Cx will register the Engine with Public or Private IP
  usePublicUrlForMonitor: true    #DE will monitor if an Engine is up and running based on Public or Private IP

  
cx-engine:
  engineExpireIntervalSecs: 240   #Blocks of time an instance is paid by - this is used for expiring/termination of instances, normally 3600 (1 hr)
  enginePrefix: cx-engine         #Prefix given to naming the instance within the cloud provider
  pool:
    - count: 3                    #Maximum number of instances that will be launched for this pool mapping
      minimum: 0                  #Leave as zero to ensure engines are cleaned up, otherwise engines will stay at a minimum count once one is launched
      scanSize:
        maxLOC: 19999
        minLOC: 0
        name: S                   #Name to map to the cx-aws-engine.engineSizeMap
    - count: 3
      minimum: 0
      scanSize:
        maxLOC: 99999
        minLOC: 20000
        name: M
    - count: 1
      minimum: 0
      scanSize:
        maxLOC: 999999999
        minLOC: 100000
        name: L
